[gd_resource type="VisualShader" load_steps=26 format=3 uid="uid://3qdm82ratpjv"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_klyn4"]
size = Vector2(500, 200)
expression = "out_vec.x = in_vec.x;
out_vec.y = in_vec.y + DELTA / LIFETIME;
out_vec.z = in_vec.z;"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_t1i4g"]
input_name = "custom"

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_jsswm"]

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_6v1f0"]
op_type = 0

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_t1i4g"]
parameter_name = "Texture2DParameter"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_5gn1b"]
source = 5

[sub_resource type="VisualShaderNodeTransformCompose" id="VisualShaderNodeTransformCompose_r85qp"]

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_klyn4"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_jsswm"]
parameter_name = "Spread"
default_value_enabled = true
default_value = 45.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_d60vn"]
size = Vector2(380, 420)
expression = "float angle = spread * 2.0 * PI / 360.0;

out_direction = rotate3DY(direction, (hash(seed)-0.5)*angle);"

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_6v1f0"]
size = Vector2(700, 260)
expression = "float hash(float seed) {
    return fract(sin(seed) * 43758.5453123);
}

vec3 rotate3DY(vec3 v, float angle) {
    float s = sin(angle);
    float c = cos(angle);


    mat3 rot = mat3(
		vec3(c,0.0, -s),
		vec3(0.0,1.0,0.0),
		vec3(s,0.0,  c)
	);
	return rot * v;
}"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_5gn1b"]

[sub_resource type="VisualShaderNodeTransformVecMult" id="VisualShaderNodeTransformVecMult_r85qp"]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_klyn4"]
input_name = "emission_transform"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_jsswm"]

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_jsswm"]
default_input_values = [0, 0.0, 1, -0.005, 2, 0.0]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_jsswm"]
input_name = "transform"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_6v1f0"]
size = Vector2(360, 300)
expression = "out_tr = transform;
out_tr[0] = vec4(1.0, 0.0, 0.0, 0.0);
out_tr[1] = vec4(0.0, 1.0, 0.0, 0.0);
out_tr[2] = vec4(0.0, 0.0, 1.0, 0.0);"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_6v1f0"]
parameter_name = "pixel_size"
default_value_enabled = true
default_value = 0.01

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_dd0fi"]
input_name = "random_seed"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_s3iqy"]
input_name = "index"

[sub_resource type="VisualShaderNodeMultiplyAdd" id="VisualShaderNodeMultiplyAdd_0tyqb"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(10, 2, 2), 2, Vector3(0, 0, 0)]
expanded_output_ports = [0]
op_type = 2

[sub_resource type="VisualShaderNodeVec3Parameter" id="VisualShaderNodeVec3Parameter_d3ctl"]
parameter_name = "SpeedMultiplier"
default_value_enabled = true
default_value = Vector3(1, 1, 1)

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_oksfk"]
size = Vector2(480, 200)
expression = "seed_index = seed / (index * 4.0 + 1.0);"

[sub_resource type="VisualShaderNodeVec3Parameter" id="VisualShaderNodeVec3Parameter_ujmn6"]
parameter_name = "Speed"
default_value_enabled = true
default_value = Vector3(0, 0, -1)

[resource]
code = "shader_type particles;
uniform vec3 Speed = vec3(0.000000, 0.000000, -1.000000);
uniform float Spread = 45.0;
uniform vec3 SpeedMultiplier = vec3(1.000000, 1.000000, 1.000000);
uniform float pixel_size = 0.00999999977648;


float __rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float __rand_from_seed_m1_p1(inout uint seed) {
	return __rand_from_seed(seed) * 2.0 - 1.0;
}

float __randf_range(inout uint seed, float from, float to) {
	return __rand_from_seed(seed) * (to - from) + from;
}

uint __hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

mat3 __build_rotation_mat3(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat3(vec3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s), vec3(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s), vec3(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c));
}

mat4 __build_rotation_mat4(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat4(vec4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0), vec4(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0), vec4(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0), vec4(0, 0, 0, 1));
}

vec2 __get_random_unit_vec2(inout uint seed) {
	return normalize(vec2(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec3 __get_random_unit_vec3(inout uint seed) {
	return normalize(vec3(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

// GlobalExpression:0
	float hash(float seed) {
	    return fract(sin(seed) * 43758.5453123);
	}
	
	vec3 rotate3DY(vec3 v, float angle) {
	    float s = sin(angle);
	    float c = cos(angle);
	
	
	    mat3 rot = mat3(
			vec3(c,0.0, -s),
			vec3(0.0,1.0,0.0),
			vec3(s,0.0,  c)
		);
		return rot * v;
	}
void start() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// StartOutput:0
		if (RESTART_POSITION) {
			TRANSFORM = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));
			if (RESTART_VELOCITY) {
				VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
			}
			TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		}


	}
	
	{
// Input:20
		mat4 n_out20p0 = EMISSION_TRANSFORM;


// Vector3Parameter:9
		vec3 n_out9p0 = Speed;


// FloatParameter:10
		float n_out10p0 = Spread;


// Input:3
		uint n_out3p0 = RANDOM_SEED;


// Input:5
		uint n_out5p0 = INDEX;


		float n_out8p0;
// Expression:8
		n_out8p0 = 0.0;
		{
			n_out8p0 = float(n_out3p0) / (float(n_out5p0) * 4.0 + 1.0);
		}


		vec3 n_out11p0;
// Expression:11
		n_out11p0 = vec3(0.0, 0.0, 0.0);
		{
			float angle = n_out10p0 * 2.0 * PI / 360.0;
			
			n_out11p0 = rotate3DY(n_out9p0, (hash(n_out8p0)-0.5)*angle);
		}


// TransformVectorMult:19
		vec3 n_out19p0 = (n_out20p0 * vec4(n_out11p0, 0.0)).xyz;


// Vector3Parameter:7
		vec3 n_out7p0 = SpeedMultiplier;


// MultiplyAdd:6
		vec3 n_in6p2 = vec3(0.00000, 0.00000, 0.00000);
		vec3 n_out6p0 = fma(n_out19p0, n_out7p0, n_in6p2);
		float n_out6p1 = n_out6p0.r;


// VectorCompose:22
		float n_in22p1 = -0.00500;
		vec3 n_out22p0 = vec3(n_out6p1, n_in22p1, n_out6p1);


// FloatConstant:18
		float n_out18p0 = 0.000000;


// FloatConstant:21
		float n_out21p0 = 0.000000;


// Input:23
		mat4 n_out23p0 = TRANSFORM;


// FloatParameter:25
		float n_out25p0 = pixel_size;


		mat4 n_out24p0;
// Expression:24
		n_out24p0 = mat4(1.0);
		{
			n_out24p0 = n_out23p0;
			n_out24p0[0] = vec4(1.0, 0.0, 0.0, 0.0);
			n_out24p0[1] = vec4(0.0, 1.0, 0.0, 0.0);
			n_out24p0[2] = vec4(0.0, 0.0, 1.0, 0.0);
		}


// CustomStartOutput:0
		CUSTOM.rgb = n_out22p0;
		CUSTOM.a = n_out18p0;
		VELOCITY = n_out6p0;
		COLOR.a = n_out21p0;
		TRANSFORM = n_out24p0;


	}
}

void process() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// Input:3
		vec4 n_out3p0 = CUSTOM;


		vec3 n_out2p0;
// Expression:2
		n_out2p0 = vec3(0.0, 0.0, 0.0);
		{
			n_out2p0.x = vec3(n_out3p0.xyz).x;
			n_out2p0.y = vec3(n_out3p0.xyz).y + DELTA / LIFETIME;
			n_out2p0.z = vec3(n_out3p0.xyz).z;
		}


// CustomProcessOutput:0
		CUSTOM.rgb = n_out2p0;


	}
}

"
mode = 2
flags/collision_use_scale = false
flags/disable_force = false
flags/disable_velocity = false
flags/keep_data = false
nodes/start/0/position = Vector2(1600, -20)
nodes/process/0/position = Vector2(1140, -40)
nodes/start_custom/0/position = Vector2(1580, 140)
nodes/start_custom/3/node = SubResource("VisualShaderNodeInput_dd0fi")
nodes/start_custom/3/position = Vector2(-1159.25, 66.7878)
nodes/start_custom/5/node = SubResource("VisualShaderNodeInput_s3iqy")
nodes/start_custom/5/position = Vector2(-1159.25, 286.788)
nodes/start_custom/6/node = SubResource("VisualShaderNodeMultiplyAdd_0tyqb")
nodes/start_custom/6/position = Vector2(840, 220)
nodes/start_custom/7/node = SubResource("VisualShaderNodeVec3Parameter_d3ctl")
nodes/start_custom/7/position = Vector2(420.75, 906.788)
nodes/start_custom/8/node = SubResource("VisualShaderNodeExpression_oksfk")
nodes/start_custom/8/position = Vector2(-739.25, 106.788)
nodes/start_custom/8/size = Vector2(480, 200)
nodes/start_custom/8/input_ports = "0,0,seed;1,0,index;"
nodes/start_custom/8/output_ports = "0,0,seed_index;"
nodes/start_custom/8/expression = "seed_index = seed / (index * 4.0 + 1.0);"
nodes/start_custom/9/node = SubResource("VisualShaderNodeVec3Parameter_ujmn6")
nodes/start_custom/9/position = Vector2(-619.25, 826.788)
nodes/start_custom/10/node = SubResource("VisualShaderNodeFloatParameter_jsswm")
nodes/start_custom/10/position = Vector2(-619.25, 1066.79)
nodes/start_custom/11/node = SubResource("VisualShaderNodeExpression_d60vn")
nodes/start_custom/11/position = Vector2(-99.25, 526.788)
nodes/start_custom/11/size = Vector2(380, 420)
nodes/start_custom/11/input_ports = "0,4,direction;1,0,spread;2,0,seed;"
nodes/start_custom/11/output_ports = "0,4,out_direction;"
nodes/start_custom/11/expression = "float angle = spread * 2.0 * PI / 360.0;

out_direction = rotate3DY(direction, (hash(seed)-0.5)*angle);"
nodes/start_custom/12/node = SubResource("VisualShaderNodeGlobalExpression_6v1f0")
nodes/start_custom/12/position = Vector2(-460, -240)
nodes/start_custom/12/size = Vector2(700, 260)
nodes/start_custom/12/input_ports = ""
nodes/start_custom/12/output_ports = ""
nodes/start_custom/12/expression = "float hash(float seed) {
    return fract(sin(seed) * 43758.5453123);
}

vec3 rotate3DY(vec3 v, float angle) {
    float s = sin(angle);
    float c = cos(angle);


    mat3 rot = mat3(
		vec3(c,0.0, -s),
		vec3(0.0,1.0,0.0),
		vec3(s,0.0,  c)
	);
	return rot * v;
}"
nodes/start_custom/18/node = SubResource("VisualShaderNodeFloatConstant_5gn1b")
nodes/start_custom/18/position = Vector2(660, 20)
nodes/start_custom/19/node = SubResource("VisualShaderNodeTransformVecMult_r85qp")
nodes/start_custom/19/position = Vector2(560, 260)
nodes/start_custom/20/node = SubResource("VisualShaderNodeInput_klyn4")
nodes/start_custom/20/position = Vector2(160, 200)
nodes/start_custom/21/node = SubResource("VisualShaderNodeFloatConstant_jsswm")
nodes/start_custom/21/position = Vector2(1340, 280)
nodes/start_custom/22/node = SubResource("VisualShaderNodeVectorCompose_jsswm")
nodes/start_custom/22/position = Vector2(1300, -60)
nodes/start_custom/23/node = SubResource("VisualShaderNodeInput_jsswm")
nodes/start_custom/23/position = Vector2(800, 480)
nodes/start_custom/24/node = SubResource("VisualShaderNodeExpression_6v1f0")
nodes/start_custom/24/position = Vector2(1120, 440)
nodes/start_custom/24/size = Vector2(360, 300)
nodes/start_custom/24/input_ports = "0,7,transform;1,0,pixel_size;"
nodes/start_custom/24/output_ports = "0,7,out_tr;"
nodes/start_custom/24/expression = "out_tr = transform;
out_tr[0] = vec4(1.0, 0.0, 0.0, 0.0);
out_tr[1] = vec4(0.0, 1.0, 0.0, 0.0);
out_tr[2] = vec4(0.0, 0.0, 1.0, 0.0);"
nodes/start_custom/25/node = SubResource("VisualShaderNodeFloatParameter_6v1f0")
nodes/start_custom/25/position = Vector2(780, 640)
nodes/start_custom/connections = PackedInt32Array(3, 0, 8, 0, 5, 0, 8, 1, 9, 0, 11, 0, 10, 0, 11, 1, 8, 0, 11, 2, 7, 0, 6, 1, 6, 0, 0, 2, 18, 0, 0, 1, 11, 0, 19, 1, 20, 0, 19, 0, 19, 0, 6, 0, 21, 0, 0, 4, 22, 0, 0, 0, 6, 1, 22, 0, 6, 1, 22, 2, 23, 0, 24, 0, 25, 0, 24, 1, 24, 0, 0, 5)
nodes/process_custom/2/node = SubResource("VisualShaderNodeExpression_klyn4")
nodes/process_custom/2/position = Vector2(-1140, -40)
nodes/process_custom/2/size = Vector2(500, 200)
nodes/process_custom/2/input_ports = "0,4,in_vec;"
nodes/process_custom/2/output_ports = "0,4,out_vec;"
nodes/process_custom/2/expression = "out_vec.x = in_vec.x;
out_vec.y = in_vec.y + DELTA / LIFETIME;
out_vec.z = in_vec.z;"
nodes/process_custom/3/node = SubResource("VisualShaderNodeInput_t1i4g")
nodes/process_custom/3/position = Vector2(-1520, 0)
nodes/process_custom/4/node = SubResource("VisualShaderNodeVectorDecompose_jsswm")
nodes/process_custom/4/position = Vector2(-580, 260)
nodes/process_custom/5/node = SubResource("VisualShaderNodeVectorCompose_6v1f0")
nodes/process_custom/5/position = Vector2(-300, 260)
nodes/process_custom/6/node = SubResource("VisualShaderNodeTexture2DParameter_t1i4g")
nodes/process_custom/6/position = Vector2(-540, 500)
nodes/process_custom/7/node = SubResource("VisualShaderNodeTexture_5gn1b")
nodes/process_custom/7/position = Vector2(0, 320)
nodes/process_custom/8/node = SubResource("VisualShaderNodeTransformCompose_r85qp")
nodes/process_custom/8/position = Vector2(600, 460)
nodes/process_custom/9/node = SubResource("VisualShaderNodeVectorCompose_klyn4")
nodes/process_custom/9/position = Vector2(262.663, 510.479)
nodes/process_custom/connections = PackedInt32Array(2, 0, 0, 0, 3, 0, 2, 0, 2, 0, 4, 0, 4, 1, 5, 0, 6, 0, 7, 2, 5, 0, 7, 0, 7, 0, 8, 0, 7, 0, 9, 0)
