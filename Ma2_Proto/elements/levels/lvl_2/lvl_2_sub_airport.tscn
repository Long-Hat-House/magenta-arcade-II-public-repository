[gd_scene load_steps=26 format=3 uid="uid://cudfmtle1dqiu"]

[ext_resource type="PackedScene" uid="uid://bcmggsmmlhf30" path="res://elements/powerups/button/powerup_weapon_button_tap_green.tscn" id="1_l3ahp"]
[ext_resource type="PackedScene" uid="uid://obybl27j0vyy" path="res://elements/stage_pieces/pampulha/stage_piece_pampulha_airport.tscn" id="1_pcvqx"]
[ext_resource type="PackedScene" uid="uid://ce0o66smctqbt" path="res://elements/npc/npc_talking_alone.tscn" id="2_7e71k"]
[ext_resource type="PackedScene" uid="uid://cyh3qxcb2s7gv" path="res://elements/powerups/button/powerup_weapon_button_tap_yellow.tscn" id="2_q0ydj"]
[ext_resource type="PackedScene" uid="uid://dcxopovxim3xx" path="res://elements/powerups/button/holdable_button_fire_rate.tscn" id="3_mbnn3"]
[ext_resource type="PackedScene" uid="uid://1w3067r22ffa" path="res://elements/powerups/button/holdable_button_warmup.tscn" id="4_gvfo0"]
[ext_resource type="Script" uid="uid://x3edt682w58i" path="res://systems/level/level_snippet_sequence.gd" id="5_mbnn3"]
[ext_resource type="Script" uid="uid://d2nlpuu05j3ho" path="res://systems/level/level_snippet_altars.gd" id="6_gvfo0"]
[ext_resource type="Script" uid="uid://dekoncn5rcfpo" path="res://systems/level/level_snippet_goto_specific_measure.gd" id="6_y5y1b"]
[ext_resource type="Resource" uid="uid://dktlaonjhsc2n" path="res://elements/levels/lvl_info_2.tres" id="7_y5y1b"]
[ext_resource type="PackedScene" uid="uid://c60s66rh2v20w" path="res://elements/enemy/roboto_tucano/enemy_tucano.tscn" id="9_8hhj6"]
[ext_resource type="Script" uid="uid://d3gwyabb6e0e0" path="res://systems/level/level_snippet_node.gd" id="9_isslc"]
[ext_resource type="PackedScene" uid="uid://t7wocwarj2c3" path="res://elements/enemy/pizza/enemy_pizza_roboto.tscn" id="10_bjx8q"]
[ext_resource type="PackedScene" uid="uid://bfp6hll5p8pd" path="res://elements/enemy/pizza/enemy_pizza_roboto_shooter.tscn" id="11_8e8jg"]
[ext_resource type="PackedScene" uid="uid://c200go5gdekh0" path="res://elements/enemy/laser/enemy_laser_roboto.tscn" id="12_pcvqx"]
[ext_resource type="PackedScene" uid="uid://bcpgsfbgm245l" path="res://elements/powerups/altar/powerup_altar.tscn" id="13_7e71k"]
[ext_resource type="PackedScene" uid="uid://4sg41fnp8nn7" path="res://elements/enemy/roboto_tucano/enemy_tucano_challenge.tscn" id="15_8e8jg"]
[ext_resource type="Resource" uid="uid://dm7srcy5yy22v" path="res://systems/challenge/challenges/challenge_airport.tres" id="16_pcvqx"]
[ext_resource type="PackedScene" uid="uid://bsy18pj7t3kwo" path="res://elements/enemy/copter/enemy_roboto_copter.tscn" id="18_8tm1r"]

[sub_resource type="GDScript" id="GDScript_mvg20"]
resource_name = "lvl_sub"
script/source = "extends Level

const CHALLENGE_AIRPORT = preload(\"res://systems/challenge/challenges/challenge_airport.tres\")

## stage pieces
@export var piece:LevelStagePiece;

@export var snippet:Level_Snippet_Node;


func _ready():
	await await_for_level_ready()

	stage.attach_piece(piece);
	stage.repivot();


	stage.set_pivot_offset(
		(get_tree().get_nodes_in_group(\"measure\")[0] as Node3D).global_position
	)

	#cam.set_instant_position(get_stage_measure(0).global_position)
	#cam.tween_position_vector(get_stage_measure(1).global_position, 2, Tween.TRANS_QUINT, Tween.EASE_OUT)
	#set_current_measure(1);

	cmd_array([
		snippet.cmd(self),
		cmd_clear_measures(),
	])

func goto_measure(measure:int, duration:float, wait:bool = false, trans:Tween.TransitionType = Tween.TRANS_SINE, ease:Tween.EaseType = Tween.EASE_IN_OUT)->CMD:
	var seq:Array[CMD] = [
		CMD_Callable.new(func():
			set_current_measure(measure);
			stage.set_pivot_offset_to_exactly_node(get_current_measure());
			cam.tween_position_vector(stage.get_grid(0, 0), duration, trans, ease);
			),
	]
	if wait:
		seq.push_back(CMD_Wait_Seconds.new(duration));

	return CMD_Sequence.new(seq);

func goto_next_measure(duration:float, wait:bool = false)->CMD:
	var seq:Array[CMD] = [
		CMD_Callable.new(func():
			walk_measure();
			stage.set_pivot_offset_to_exactly_node(get_current_measure());
			cam.tween_position_vector(stage.get_grid(0, 0), duration);
			),
	]

	if wait:
		seq.push_back(CMD_Wait_Seconds.new(duration));

	return CMD_Sequence.new(seq);
"

[sub_resource type="GDScript" id="GDScript_gvfo0"]
script/source = "extends Level_Snippet_Node

@export var level_info:LevelInfo;

func _cmd(level:Level)->Level.CMD:
	return Level.CMD_Sequence.new([
		Level.CMD_Wait_Seconds.new(.5),
		Level.CMD_Show_Level_Info.new(level_info),
		Level.CMD_Wait_Seconds.new(.5),
		Level.CMD_Music_Event.new(AK.EVENTS.MUSIC_LEVEL3_GAMEPLAY_START),
		Level.CMD_Wait_Seconds.new(3.0),
	]);
"

[sub_resource type="GDScript" id="GDScript_y5y1b"]
script/source = "extends Level_Snippet_Node

const ENEMY_TUCANO = preload(\"res://elements/enemy/roboto_tucano/enemy_tucano.tscn\")
const ENEMY_PIZZA_ROBOTO = preload(\"res://elements/enemy/pizza/enemy_pizza_roboto.tscn\")
const ENEMY_PIZZA_ROBOTO_SHOOTER = preload(\"res://elements/enemy/pizza/enemy_pizza_roboto_shooter.tscn\")
const ENEMY_TUCANO_CHALLENGE = preload(\"res://elements/enemy/roboto_tucano/enemy_tucano_challenge.tscn\")
const ENEMY_LASER_ROBOTO = preload(\"res://elements/enemy/laser/enemy_laser_roboto.tscn\")
const ENEMY_BOMB_ROBOTO = preload(\"res://elements/enemy/bomb/enemy_bomb_roboto.tscn\")

const AiBombRoboto = preload(\"res://elements/enemy/bomb/ai_bomb_roboto.gd\")

@export var altar_snippet:Level_Snippet_Node;

func _cmd(lvl:Level)->Level.CMD:
	var enemies:Array[PackedScene] = [ENEMY_PIZZA_ROBOTO, ENEMY_PIZZA_ROBOTO_SHOOTER, ENEMY_LASER_ROBOTO, ENEMY_BOMB_ROBOTO];
	var groups:Array[String] = [\"fw_0\", \"eita\", \"fw_2\"];
	var everybody:Callable = func(obj):
		if obj is AI_WalkAndDo:
			var wd := obj as AI_WalkAndDo;
			wd.accelerationBegin = 9;
			wd.accelerationDuration = 3;

			if not obj is AiBombRoboto:
				wd.distanceMax = 16;
	var walk_camera:Callable = func():
		lvl.stage.add_pivot_offset(Vector3.FORWARD * 2.25);
		lvl.cam.tween_position_vector(lvl.stage.get_grid(0,0), 0.8, Tween.TRANS_CUBIC);
	return Level.CMD_Sequence.new([
		Level.CMD_Wait_Seconds.new(0.25),
		altar_snippet.cmd(lvl),
		lvl.cmd_enemy_line(enemies, [0, 1], 0, -2, -2, Vector2(0, -2), groups[1], everybody),
		lvl.cmd_enemy_line(enemies, [0, 1], 0, 2, -2, Vector2(0, -2), groups[1], everybody),
		lvl.objs.cmd_wait_group(groups[1]),
		Level.CMD_Callable.new(walk_camera),
		Level.CMD_Parallel_Complete.new([
			Level.CMD_Sequence.new([
				Level.CMD_Wait_Seconds.new(3.5),
				lvl.cmd_enemy_line(enemies, [0, 2, 1], 0, 0, -1, Vector2(0, -2), groups[1], everybody),
				lvl.objs.cmd_wait_group(groups[1]),
				Level.CMD_Wait_Seconds.new(0.25),
				lvl.cmd_enemy_line(enemies, [3], 0, 0, -1, Vector2(0, -2), groups[1], everybody),
				Level.CMD_Callable.new(walk_camera),
				Level.CMD_Wait_Seconds.new(2.0),
				lvl.cmd_enemy_line(enemies, [0, 1, 1], 0, 0, -3, Vector2(0, -2), groups[1], everybody),
				lvl.objs.cmd_wait_group(groups[1]),
			]),
			
			Level.CMD_Sequence.new([
				Level.CMD_Wait_Seconds.new(0.5),
				lvl.cmd_enemy_line(enemies, [3], 0, -3, -1, Vector2(0, -2), groups[0], everybody),
				Level.CMD_Wait_Seconds.new(1.0),
				lvl.cmd_enemy_line(enemies, [1, 1], 0, -3, -3, Vector2(0, -2), groups[0], everybody),
				lvl.objs.cmd_wait_group(groups[0]),
				Level.CMD_Callable.new(walk_camera),
				Level.CMD_Wait_Seconds.new(0.5),
				lvl.cmd_enemy_line(enemies, [0, 0, 2, 1], 0, -3, -1, Vector2(0, -2), groups[0], everybody),
				lvl.objs.cmd_wait_group(groups[0]),
			]),
			Level.CMD_Sequence.new([
				Level.CMD_Wait_Seconds.new(2.5),
				lvl.cmd_enemy_line(enemies, [3], 0, 3, -1, Vector2(0, -2), groups[2], everybody),
				Level.CMD_Wait_Seconds.new(1.0),
				lvl.cmd_enemy_line(enemies, [0, 1], 0, 3, -3, Vector2(0, -2), groups[2], everybody),
				lvl.objs.cmd_wait_group(groups[2]),
				Level.CMD_Callable.new(walk_camera),
				Level.CMD_Wait_Seconds.new(0.5),
				lvl.cmd_enemy_line(enemies, [0, 0, 2, 1], 0, 3, -1, Vector2(0, -2), groups[2], everybody),
				lvl.objs.cmd_wait_group(groups[2]),
			]),
		])
	])
"

[sub_resource type="GDScript" id="GDScript_v5lhs"]
script/source = "extends Level_Snippet_Node

const ENEMY_PIZZA_ROBOTO_SHOOTER = preload(\"res://elements/enemy/pizza/enemy_pizza_roboto_shooter.tscn\")

signal talked;

func _cmd(lvl:Level)->Level.CMD:
	return Level.CMD_Sequence.new([
		Level.CMD_Parallel.new([
			Level.CMD_Wait_Seconds.new(15.0),
			Level.CMD_Wait_Signal.new(talked),
			Level.CMD_Await_AsyncCallable.new(func():
				await Player.instance.any_equipment_powerup;
				, self),
			#Level.CMD_Sequence.new([
				#Level.CMD_Callable.new(func():
					#for pos:Vector2 in [Vector2(3.5,17), Vector2(2.5,17), Vector2(3, 16)]:
						#var pizza:AI_WalkAndDo = lvl.objs.create_object(ENEMY_PIZZA_ROBOTO_SHOOTER, \"plane\", lvl.stage.get_grid(pos.x, pos.y));
						#pizza.walkAndStop = true;
						#pizza.distanceMax = 0.5;
					#),
				#lvl.objs.cmd_wait_group(\"plane\"),
			#])
		]),
		Level.CMD_Wait_Seconds.new(1.05),
	]);


func _on_npc_talking_alone_conversation_ended() -> void:
	talked.emit();
"

[sub_resource type="GDScript" id="GDScript_isslc"]
script/source = "extends Level_Snippet_Node

@export var tucano:PackedScene;
@export var pizza:PackedScene;
@export var shooter:PackedScene;
@export var laser:PackedScene;
@export var altar:PackedScene;

@export var second_altars:Array[PackedScene];

var group:String = \"main_group\"

func _cmd(lvl:Level)->Level.CMD:
	var enemies:Array[PackedScene] = [tucano, pizza, shooter, laser]
	var turn:Callable = func(stuff:Node3D, dir:Vector3):
		stuff.transform.basis = Basis.looking_at(dir, Vector3.UP, true);
	var everybody:Callable = func(obj):
		if obj is AI_WalkAndDo:
			var wd := obj as AI_WalkAndDo;
			wd.accelerationBegin = 9;
			wd.accelerationDuration = 3;
			wd.distanceMax = 14;
			wd.walkAndStop = true;
	var d:float = 2.65;
	return Level.CMD_Sequence.new([
		Level.CMD_Wait_Seconds.new(0.5),
		lvl.cmd_enemy_line(enemies, [0, 0], 2, -7, 11, Vector2.DOWN * 4, group, turn.bind(Vector3.RIGHT)),
		lvl.objs.cmd_wait_group_or_time(group, 2.0),
		Level.CMD_Wait_Seconds.new(2),
		lvl.cmd_enemy_line(enemies, [0, 0], 0, -d, 0, Vector2.RIGHT * d * 2.0, group, turn.bind(Vector3.BACK)),
		Level.CMD_Wait_Seconds.new(0.5),
		lvl.cmd_enemy_line(enemies, [1, 2], 0, -d, 1, Vector2(0, -2), group, everybody),
		lvl.cmd_enemy_line(enemies, [1, 2], 0, d, 1, Vector2(0, -2), group, everybody),
		Level.CMD_Parallel_Complete.new([
			Level.CMD_Sequence.new([
				Level.CMD_Wait_Seconds.new(3.25),
				lvl.cmd_enemy_line(enemies, [0], 0, 0, 0, Vector2.RIGHT * 4, group, turn.bind(Vector3.BACK)),
				Level.CMD_Wait_Seconds.new(0.5),
				lvl.cmd_enemy_line(enemies, [1, 3, 2], 0, 0, 1, Vector2(0, -2), group, everybody),
			]),
			Level.CMD_Sequence.new([
				Level.CMD_Wait_Seconds.new(4.25),
				Level_Cmd_Utils.cmd_multiple_altars(altar, second_altars, lvl, group, Vector2(-d, 27), Vector3.RIGHT * d * 2, Vector3.FORWARD),
			]),
		]),
		lvl.objs.cmd_wait_group_and_time(group, .5),
	]);
"

[sub_resource type="GDScript" id="GDScript_8hhj6"]
script/source = "extends Level_Snippet_Node

@export var measure_from:int = 6;
@export var measure_to:int = 7;
@export var wait_tucanos:float = 2.25;
@export var wait_challenge:float = 3.76;
@export var challenge_duration:float = 25;
@export var enemy_tucano_challenge:PackedScene;


@export var copter:PackedScene;

@export var challenge_info:ChallengeInfo;

func _cmd(lvl:Level)->Level.CMD:

	var challenge = {
		tucano_left = null,
		tucano_right = null,
		group = \"challenge\",
		tucano_left_ok = false,
		tucano_right_ok = false,
	}

	var height_tuc:Vector3 = Vector3(-4, 50, 20);
	#var height_tuc:Vector3 = Vector3(0, 0, 0);
	var dur_height_tuc:float = wait_tucanos;

	var before_tween:Callable = func before_tween_tuc(tuc:AI_Tucano_Challenge, dist:Vector3):
		tuc.tween_added_position += dist;
		tuc._physics_process(0)

	var setup_tween:Callable = func setup_tween_tuc(tuc:AI_Tucano_Challenge, duration:float)->Tween:
		tuc.lock_in_camera();
		var t := tuc.create_tween().set_parallel();
		t.tween_property(tuc, \"tween_added_position:x\", 0, duration).set_ease(Tween.EASE_OUT).set_trans(Tween.TRANS_LINEAR);
		t.tween_property(tuc, \"tween_added_position:y\", 0, duration).set_ease(Tween.EASE_OUT).set_trans(Tween.TRANS_CUBIC);
		t.tween_property(tuc, \"tween_added_position:z\", 0, duration).set_ease(Tween.EASE_IN).set_trans(Tween.TRANS_QUAD);
		return t;

	return Level.CMD_Sequence.new([
		Level.CMD_Sequence.new([
			Level.CMD_Await_AsyncCallable.new(func():
				await lvl.get_stage_measure(measure_from).do_camera_tween(lvl, 1.0);
				,self),
			## setup tucs
			Level.CMD_Callable.new(func():
				var z:float = 12;
				challenge.tucano_left = lvl.objs.create_object(enemy_tucano_challenge, challenge.group, lvl.stage.get_grid(-3,z));
				challenge.tucano_right = lvl.objs.create_object(enemy_tucano_challenge, challenge.group, lvl.stage.get_grid(3,z));
				challenge.tucano_left.rotation_degrees.y = 180;
				challenge.tucano_right.rotation_degrees.y = 180;

				## the tween
				#await get_tree().create_timer(dur_height_tuc).timeout;

				before_tween.call(challenge.tucano_left, height_tuc);
				height_tuc.x *= -1;
				before_tween.call(challenge.tucano_right, height_tuc);
				),
		]),
		Level.CMD_Await_AsyncCallable.new(func():
			await lvl.get_stage_measure(measure_to).do_camera_tween(lvl, 0.0, challenge_duration);
			,self),
		Level.CMD_Parallel_Complete.new([
			## Wait camera then tween the tucs
			Level.CMD_Sequence.new([
				Level.CMD_Await_AsyncCallable.new(func():
					setup_tween.call(challenge.tucano_left, dur_height_tuc);
					await setup_tween.call(challenge.tucano_right, dur_height_tuc).finished;
					, self),
			]),
			## Wait the wait before then begin the challenge
			Level.CMD_Sequence.new([
				Level.CMD_Wait_Seconds.new(wait_challenge),
				Level.CMD_Parallel_Complete.new([
					ChallengeController.instance.cmd_begin(challenge_info),
				]),
			])
		]),
		Level.CMD_Callable.new(func():
			if is_instance_valid(challenge.tucano_left):
				challenge.tucano_left.start_challenge();
				challenge.tucano_left_ok = false;
				challenge.tucano_left.killed.connect(func():
					challenge.tucano_left_ok = true;
					);
			else:
				challenge.tucano_left_ok = true;
			if is_instance_valid(challenge.tucano_right):
				challenge.tucano_right.start_challenge();
				challenge.tucano_right_ok = false;
				challenge.tucano_right.killed.connect(func():
					challenge.tucano_right_ok = true;
					);
			else:
				challenge.tucano_right_ok = true;


			),
		Level.CMD_Parallel.new([
			## Kill both condition
			Level.CMD_Sequence.new([
				lvl.objs.cmd_wait_group(challenge.group),
				#Level.CMD_Await_AsyncCallable.new(func():
					#await lvl.get_stage_measure(measure_to).do_camera_tween(lvl, 1.0, 2.0);
					#,self),
			]),
			## Call some copters
			Level.CMD_Sequence.new([
				Level.CMD_Wait_Seconds.new(4),
				AI_Roboto_Copter.cmd_make_copters_quick(lvl, [copter], [0,0,0], func(): return lvl.cam.get_stage_grid_pos(lvl.stage, -0.75, -3), Vector3.FORWARD, [100], \"copters\"),
				AI_Roboto_Copter.cmd_make_copters_quick(lvl, [copter], [0,0,0], func(): return lvl.cam.get_stage_grid_pos(lvl.stage, +0.75, -3), Vector3.FORWARD, [100], \"copters\"),
				Level.CMD_Wait_Seconds.new(2),
				AI_Roboto_Copter.cmd_make_copters_quick(lvl, [copter], [0,0], func(): return lvl.cam.get_stage_grid_pos(lvl.stage, -0.75, -2), Vector3.FORWARD, [100], \"copters\"),
				AI_Roboto_Copter.cmd_make_copters_quick(lvl, [copter], [0,0], func(): return lvl.cam.get_stage_grid_pos(lvl.stage, +0.75, -2), Vector3.FORWARD, [100], \"copters\"),
				
				Level.CMD_Wait_Forever.new(),
			]),
			## Timeout lose condition
			Level.CMD_Sequence.new([
				Level.CMD_Wait_Seconds.new(challenge_duration),
				Level.CMD_Callable.new(func():
					if is_instance_valid(challenge.tucano_left):
						challenge.tucano_left.stop_challenge();
					if is_instance_valid(challenge.tucano_right):
						challenge.tucano_right.stop_challenge();
					),
			]),
			
			## One escaped condition
			Level.CMD_Sequence.new([
				Level.CMD_Parallel.new([
					Level.CMD_Await_AsyncCallable.new(func():
						if is_instance_valid(challenge.tucano_left):
							await challenge.tucano_left.lost;
						if is_instance_valid(challenge.tucano_right):
							challenge.tucano_right.stop_challenge();
						, self),
					Level.CMD_Await_AsyncCallable.new(func():
						if is_instance_valid(challenge.tucano_right):
							await challenge.tucano_right.lost;
						if is_instance_valid(challenge.tucano_left):
							challenge.tucano_left.stop_challenge();
						, self),
				])
			]),
		]),
		Level.CMD_Branch.new(func():
			return challenge.tucano_left_ok and challenge.tucano_right_ok
			, Level.CMD_Sequence.new([
				Level.CMD_Wait_Seconds.new(0.5),
				Level.CMD_Callable.new(func():
					lvl.get_stage_measure(measure_to+1).do_camera_tween(lvl, 1.0);
					),
				ChallengeController.instance.cmd_victory(challenge_info, 3),
				Level.CMD_Wait_Seconds.new(0.5),
			]),
			Level.CMD_Sequence.new([
				ChallengeController.instance.cmd_fail(challenge_info),
			])),
		Level.CMD_Wait_Seconds.new(0.75),
	])
"

[node name="LVL_AIRPORT" type="Node3D" node_paths=PackedStringArray("piece", "snippet")]
script = SubResource("GDScript_mvg20")
piece = NodePath("Airport")
snippet = NodePath("Level_Snippet_Sequence")

[node name="Airport" parent="." instance=ExtResource("1_pcvqx")]

[node name="NpcTalkingAlone" parent="Airport" instance=ExtResource("2_7e71k")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 19, 0, 40)
dialogue_id = "dial_lvl2_flavor1"
extra_dialogue_id = Array[String](["dial_lvl2_flavor2", "dial_lvl2_flavor3"])
appearence_fixed = 2

[node name="Level_Snippet_Sequence" type="Node" parent="."]
script = ExtResource("5_mbnn3")
metadata/_custom_type_script = "uid://x3edt682w58i"

[node name="Level_Snippet_Goto_Specific_Measure2" type="Node" parent="Level_Snippet_Sequence"]
script = ExtResource("6_y5y1b")
get_measure_from_index = 2
wait_multiplier = 0.0
fixed_duration = 5.0
metadata/_custom_type_script = "uid://dekoncn5rcfpo"

[node name="Show Level" type="Node" parent="Level_Snippet_Sequence"]
script = SubResource("GDScript_gvfo0")
level_info = ExtResource("7_y5y1b")
metadata/_custom_type_script = "uid://d3gwyabb6e0e0"

[node name="First Waves" type="Node" parent="Level_Snippet_Sequence" node_paths=PackedStringArray("altar_snippet")]
script = SubResource("GDScript_y5y1b")
altar_snippet = NodePath("Level_Snippet_Altars1")
metadata/_custom_type_script = "uid://d3gwyabb6e0e0"

[node name="Level_Snippet_Altars1" type="Node" parent="Level_Snippet_Sequence/First Waves"]
script = ExtResource("6_gvfo0")
items = Array[PackedScene]([ExtResource("1_l3ahp"), ExtResource("2_q0ydj")])
wait_first = 0.35
metadata/_custom_type_script = "uid://d2nlpuu05j3ho"

[node name="Level_Snippet_Goto_Specific_Measure3" type="Node" parent="Level_Snippet_Sequence"]
script = ExtResource("6_y5y1b")
get_measure_from_index = 3
wait_multiplier = 0.0
metadata/_custom_type_script = "uid://dekoncn5rcfpo"

[node name="Plane Scene" type="Node" parent="Level_Snippet_Sequence"]
script = SubResource("GDScript_v5lhs")
metadata/_custom_type_script = "uid://d3gwyabb6e0e0"

[node name="Level_Snippet_Goto_Specific_Measure4" type="Node" parent="Level_Snippet_Sequence"]
script = ExtResource("6_y5y1b")
get_measure_from_index = 4
metadata/_custom_type_script = "uid://dekoncn5rcfpo"

[node name="Tucano Tutorial + Altars" type="Node" parent="Level_Snippet_Sequence"]
script = SubResource("GDScript_isslc")
tucano = ExtResource("9_8hhj6")
pizza = ExtResource("10_bjx8q")
shooter = ExtResource("11_8e8jg")
laser = ExtResource("12_pcvqx")
altar = ExtResource("13_7e71k")
second_altars = Array[PackedScene]([ExtResource("3_mbnn3"), ExtResource("4_gvfo0")])
metadata/_custom_type_script = "uid://d3gwyabb6e0e0"

[node name="Level_Snippet_Goto_Specific_Measure5" type="Node" parent="Level_Snippet_Sequence"]
script = ExtResource("6_y5y1b")
get_measure_from_index = 5
disable = true
metadata/_custom_type_script = "uid://dekoncn5rcfpo"

[node name="Post Plane" type="Node" parent="Level_Snippet_Sequence"]
script = ExtResource("9_isslc")
disable = true
metadata/_custom_type_script = "uid://d3gwyabb6e0e0"

[node name="Challenge to Measure 6" type="Node" parent="Level_Snippet_Sequence"]
script = SubResource("GDScript_8hhj6")
enemy_tucano_challenge = ExtResource("15_8e8jg")
copter = ExtResource("18_8tm1r")
challenge_info = ExtResource("16_pcvqx")
metadata/_custom_type_script = "uid://d3gwyabb6e0e0"

[connection signal="conversation_ended" from="Airport/NpcTalkingAlone" to="Level_Snippet_Sequence/Plane Scene" method="_on_npc_talking_alone_conversation_ended"]
