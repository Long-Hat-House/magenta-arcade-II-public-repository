[gd_resource type="ShaderMaterial" load_steps=4 format=3 uid="uid://cnv73vll57oq2"]

[ext_resource type="Texture2D" uid="uid://b45p5yeqn42kq" path="res://elements/player/m_player_particle_noise_tex.tres" id="1_6th38"]
[ext_resource type="Texture2D" uid="uid://e3vad0qnvlyh" path="res://elements/player/m_player_particle_noise_tex_normal.tres" id="2_ws87s"]

[sub_resource type="Shader" id="Shader_15t40"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_toon, specular_toon;

uniform vec4 albedo : source_color;

uniform sampler2D texture_height : source_color, filter_linear_mipmap, repeat_enable;
uniform float height_strength : hint_range(0.0, 2.0, 0.01);
uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;
uniform float middle_normal = 0.5;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform vec3 uv1_time_mult;


vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);


	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
	uv1_triplanar_pos += TIME * uv1_time_mult;

	vec3 upNormal = NORMAL * height_strength;
	vec3 tex_value = triplanar_texture(texture_height, uv1_power_normal, uv1_triplanar_pos).xyz;
	tex_value = tex_value - normalize(tex_value) * middle_normal;

	VERTEX += upNormal * tex_value;
}


void fragment() {
	ALBEDO = albedo.rgb;
	//ALPHA = albedo.a;

	//float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	//METALLIC = metallic_tex * metallic;
	//SPECULAR = specular;

	//vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	//float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	//ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_15t40")
shader_parameter/albedo = Color(0.384314, 0.309804, 0.352941, 1)
shader_parameter/texture_height = ExtResource("1_6th38")
shader_parameter/height_strength = 0.37
shader_parameter/texture_normal = ExtResource("2_ws87s")
shader_parameter/normal_scale = 2.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/middle_normal = 0.1
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/uv1_time_mult = Vector3(0.003, -0.1, 0.003)
