shader_type canvas_item;

uniform vec2 speed = vec2(0.1, 0.0);
uniform float scale = 10.0;

float random(vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

float noise(vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);

    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

    vec2 u = f * f * (3.0 - 2.0 * f);

    return mix(a, b, u.x) +
           (c - a) * u.y * (1.0 - u.x) +
           (d - b) * u.x * u.y;
}

float fbm(vec2 st) {
    float value = 0.0;
    float amplitude = 0.5;
    float frequency = 0.0;
    for (int i = 0; i < 5; i++) {
        value += amplitude * noise(st);
        st *= 2.0;
        amplitude *= 0.5;
    }
    return value;
}

void fragment() {
    vec2 uv = FRAGCOORD.xy / scale; // Normalize UV coordinates

    // Move clouds over time
    uv += speed * TIME;
    
    // Apply scaling
    uv *= scale;

    // Generate noise-based clouds
    float cloud = fbm(uv);

    // Adjust color and opacity
    vec4 cloud_color = vec4(vec3(cloud), 1.0);

    // Output final color
    COLOR = cloud_color;
}